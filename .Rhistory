c <- (L-1)/2
for (i in 1:L){
for (j in 1:L){
pot[i,j] = slope*( ((i-c)/c)^2 + ((j-c)/c)^2 )
}
}
vec <- matrix( c(-1,0,1,0,0,-1,0,1), nrow=4, ncol=2, byrow = TRUE)
# prepare variables
m <- matrix(runif(L*L),L)
m1 <- m
x <-  matrix(0, nrow=trans+1, ncol=2)
x[1,] <- c(1,1)*((L-1)/2)
i <- 0
# iteration loop
for ( j in 1:(trans+T) ){
if ( j==trans+1 ){
vi <- x[i+1,]
x <-  matrix(0, nrow=T+1, ncol=2)
x[1,] <- vi
i <- 0
}
i <- i+1
m2 <- m1 + pot
m1 <- gamma*m
m1[x[i,1],x[i,2]] <- m[x[i,1],x[i,2]] + 1
ri <- sample(4)
idx <- matrix(x[i,],  nrow=4, ncol=2, byrow = TRUE)+ vec[ri,]
m2 <- m1 + pot
vi <- which(m2[idx] == min(m2[idx]))
x[i+1,] <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] )
m <- m1
}
# jitter trajectory (for better visualization)
x <- x + matrix(data=0.5*runif(2*length(x[,1])),ncol=2)
# create data frames
traj.df <- data.frame(x=x[,1],y=x[,2])
im <- m + pot
df <- expand.grid(x=15:35, y=15:35)
df$z <- as.vector(im[15:35,15:35])
# create plot
p1 <- ggplot(data=traj.df,aes(x=x,y=y)) +
geom_raster(data=df,aes(x, y, fill=z)) +
scale_fill_gradientn(colours=c("blue","red","orange","yellow")) +
geom_path(color="white") +
coord_fixed(ratio=1) + scale_x_continuous(limits=c(14.5,35.5)) +
scale_y_continuous(limits=c(14.5,35.5))
# print plot
pushViewport(viewport(layout=grid.layout(1,1)))
print(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))
#lagdist <- lagdist(x)
#
#t <- seq(from=1,to=(length(lagdist)),by=1)
#
#plot.df <- data.frame(time=t,val=lagdist)
#
## generate plot
#b <- ggplot(plot.df) + geom_line(aes(x=time,y=val)) +
#  xlab("m") + ylab(" ")  +
#  scale_x_log10() +
#  scale_y_log10()
#print(b)
View(m)
View(m2)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/SAW/saw0.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/SAW/saw0.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/SAW/saw1.R', echo=TRUE)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
#setwd("~/Documents/papers/MathModBook/Exercises-Chap2/R/SAWmodel")
setwd("~/Google\ Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/")
rm(list=ls(all=TRUE))
library(ggplot2)
library(grid)
library (stats)
T = 800
L <- 51
trans <- 0
gamma <- 0.999
slope <- 1.0*L
#time-dependent parameters
tau_p <- 150
tau_A <- 30
K <- 1
p_1 <- 0.0002
p_2 <- 0.02
beta <- 0.3
lambda0 <- 1 #steepness of potential, basemodel = 1
lambda1 <- 0.2
lambda2 <- 0.7
#time-varying functions and parameters
t <- seq(1, T + trans)
a <- lambda0/(1 + lambda1 * exp( - p_1 * (t - tau_p)^2)) # a=b
f <- 1/(1 + lambda1 * exp( - p_1 * (t - 2 * tau_p)^2))
D <- lambda2 * ( (p_2^K) / factorial(K) ) * (t - (tau_p + tau_A))^K * exp(- p_2 * (t - (tau_p + tau_A)))
a_A <- 1/(D + 1)
thres = 1/(1 + beta * ((1 - f + (  1 - a_A))))
# prepare matrices
pot <- matrix(0, nrow=L, ncol=L)
c <- (L-1)/2
for (i in 1:L){
for (j in 1:L){
pot[i,j] = slope*( ((i-c)/c)^2 + ((j-c)/c)^2 ) #potential without time-varying factor
}
}
vec <- matrix( c(-1,0,1,0,0,-1,0,1), nrow=4, ncol=2, byrow = TRUE)
# prepare variables
m <- matrix(runif(L*L),L)
m1 <- m
x <-  matrix(0, nrow=trans+1, ncol=2)
x[1,] <- c(1,1)*((L-1)/2)
i <- 0
plotf <- function(x, m, pot){
# create data frames
traj.df <- data.frame(x=x[,1],y=x[,2])
im <- m + pot
df <- expand.grid(x=15:35, y=15:35)
df$z <- as.vector(im[15:35,15:35])
# create plot
p1 <- ggplot(data=traj.df,aes(x=x,y=y)) +
geom_raster(data=df,aes(x, y, fill=z)) +
scale_fill_gradientn(colours=c("blue","red","orange","yellow")) +
geom_path(color="white") +
coord_fixed(ratio=1) + scale_x_continuous(limits=c(14.5,35.5)) +
scale_y_continuous(limits=c(14.5,35.5))
# print plot
pushViewport(viewport(layout=grid.layout(1,1)))
print(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))
}
# iteration loop
for ( j in 1:(trans+T) ){
if ( j==trans+1 ){
vi <- x[i+1,]
x <-  matrix(0, nrow=T+1, ncol=2)
x[1,] <- vi
i <- 0
}
debug_var <- m1[x[i+1,1],x[i+1,2]] #XXX delete
pot1 <- pot * a[j] #apply time-varying factor a=b to potential
i <- i+1
mx_temp <- m1[x[i,1],x[i,2]] #save value where no no relexation is applied
m1 <- gamma*m #relaxation
m1[x[i,1],x[i,2]] <- mx_temp + 1 #increase activation at h_ij
m2 <- m1 + pot1
ri <- sample(4)
idx <- matrix(x[i,],  nrow=4, ncol=2, byrow = TRUE)+ vec[ri,]
vi <- which(m2[idx] == min(m2[idx]))
next_x <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] ) #get next possible step
if(m1[next_x[1],next_x[2]] > thres[j]){ #check threshold nor next_x
#select and go to the global minimum
vi <- which(m2 == min(m2), arr.ind = TRUE) #returns vector with row & column indices of global minimum
x[i+1,] <-vi #save position
}
else
{
x[i+1,] <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] )
}
m <- m1
}
# jitter trajectory (for better visualization)
#x <- x + matrix(data=0.5*runif(2*length(x[,1])),ncol=2)
plotf(x, m, pot)
thres
plot(thres)
curve(thres, from=1, to=300)
autoplot(thres)
qplot(thres)
qplot(thres, t)
qplot(t, thres)
qplot(t[100:200], thres)
qplot(100-200, thres)
qplot(200, thres)
qplot(t, thres, xlim=[100,200])
qplot(t, thres, xlim=(100,200)
qplot(t, thres, xlim=c(100,200)
qplot(t, thres, xlim=c(100,200)
qplot(t, thres, xlim=c(100,200)
qplot(t, thres, xlim=c(100,200))
qplot(t, thres, xlim=c(100,200))
qplot(t, thres, xlim=c(125,175))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
qplot(t, thres, xlim=c(125,175))
qplot(t, thres, xlim=c(125,175))
#setwd("~/Documents/papers/MathModBook/Exercises-Chap2/R/SAWmodel")
setwd("~/Google\ Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/")
rm(list=ls(all=TRUE))
library(ggplot2)
library(grid)
library (stats)
T = 800
L <- 51
trans <- 5000
gamma <- 0.999
slope <- 1.0*L
#time-dependent parameters
tau_p <- 150
tau_A <- 30
K <- 1
p_1 <- 0.0002
p_2 <- 0.02
beta <- 0.3
lambda0 <- 1 #steepness of potential, basemodel = 1
lambda1 <- 0.2
lambda2 <- 0.7
#time-varying functions and parameters
t <- seq(1, T + trans)
a <- lambda0/(1 + lambda1 * exp( - p_1 * (t - tau_p)^2)) # a=b
f <- 1/(1 + lambda1 * exp( - p_1 * (t - 2 * tau_p)^2))
D <- lambda2 * ( (p_2^K) / factorial(K) ) * (t - (tau_p + tau_A))^K * exp(- p_2 * (t - (tau_p + tau_A)))
a_A <- 1/(D + 1)
thres = 1/(1 + beta * ((1 - f) + (  1 - a_A)))
# prepare matrices
pot <- matrix(0, nrow=L, ncol=L)
c <- (L-1)/2
for (i in 1:L){
for (j in 1:L){
pot[i,j] = slope*( ((i-c)/c)^2 + ((j-c)/c)^2 ) #potential without time-varying factor
}
}
vec <- matrix( c(-1,0,1,0,0,-1,0,1), nrow=4, ncol=2, byrow = TRUE)
# prepare variables
m <- matrix(runif(L*L),L)
m1 <- m
x <-  matrix(0, nrow=trans+1, ncol=2)
x[1,] <- c(1,1)*((L-1)/2)
i <- 0
plotf <- function(x, m, pot){
# create data frames
traj.df <- data.frame(x=x[,1],y=x[,2])
im <- m + pot
df <- expand.grid(x=15:35, y=15:35)
df$z <- as.vector(im[15:35,15:35])
# create plot
p1 <- ggplot(data=traj.df,aes(x=x,y=y)) +
geom_raster(data=df,aes(x, y, fill=z)) +
scale_fill_gradientn(colours=c("blue","red","orange","yellow")) +
geom_path(color="white") +
coord_fixed(ratio=1) + scale_x_continuous(limits=c(14.5,35.5)) +
scale_y_continuous(limits=c(14.5,35.5))
# print plot
pushViewport(viewport(layout=grid.layout(1,1)))
print(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))
}
# iteration loop
for ( j in 1:(trans+T) ){
if ( j==trans+1 ){
vi <- x[i+1,]
x <-  matrix(0, nrow=T+1, ncol=2)
x[1,] <- vi
i <- 0
}
debug_var <- m1[x[i+1,1],x[i+1,2]] #XXX delete
pot1 <- pot * a[j] #apply time-varying factor a=b to potential
i <- i+1
mx_temp <- m1[x[i,1],x[i,2]] #save value where no no relexation is applied
m1 <- gamma*m #relaxation
m1[x[i,1],x[i,2]] <- mx_temp + 1 #increase activation at h_ij
m2 <- m1 + pot1
ri <- sample(4)
idx <- matrix(x[i,],  nrow=4, ncol=2, byrow = TRUE)+ vec[ri,]
vi <- which(m2[idx] == min(m2[idx]))
next_x <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] ) #get next possible step
if(m1[next_x[1],next_x[2]] > thres[j]){ #check threshold nor next_x
#select and go to the global minimum
vi <- which(m2 == min(m2), arr.ind = TRUE) #returns vector with row & column indices of global minimum
x[i+1,] <-vi #save position
}
else
{
x[i+1,] <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] )
}
m <- m1
}
# jitter trajectory (for better visualization)
#x <- x + matrix(data=0.5*runif(2*length(x[,1])),ncol=2)
plotf(x, m, pot)
#setwd("~/Documents/papers/MathModBook/Exercises-Chap2/R/SAWmodel")
setwd("~/Google\ Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/")
rm(list=ls(all=TRUE))
library(ggplot2)
library(grid)
library (stats)
T = 50
L <- 51
trans <- 5000
gamma <- 0.999
slope <- 1.0*L
#time-dependent parameters
tau_p <- 150
tau_A <- 30
K <- 1
p_1 <- 0.0002
p_2 <- 0.02
beta <- 0.3
lambda0 <- 1 #steepness of potential, basemodel = 1
lambda1 <- 0.2
lambda2 <- 0.7
#time-varying functions and parameters
t <- seq(1, T + trans)
a <- lambda0/(1 + lambda1 * exp( - p_1 * (t - tau_p)^2)) # a=b
f <- 1/(1 + lambda1 * exp( - p_1 * (t - 2 * tau_p)^2))
D <- lambda2 * ( (p_2^K) / factorial(K) ) * (t - (tau_p + tau_A))^K * exp(- p_2 * (t - (tau_p + tau_A)))
a_A <- 1/(D + 1)
thres = 1/(1 + beta * ((1 - f) + (  1 - a_A)))
# prepare matrices
pot <- matrix(0, nrow=L, ncol=L)
c <- (L-1)/2
for (i in 1:L){
for (j in 1:L){
pot[i,j] = slope*( ((i-c)/c)^2 + ((j-c)/c)^2 ) #potential without time-varying factor
}
}
vec <- matrix( c(-1,0,1,0,0,-1,0,1), nrow=4, ncol=2, byrow = TRUE)
# prepare variables
m <- matrix(runif(L*L),L)
m1 <- m
x <-  matrix(0, nrow=trans+1, ncol=2)
x[1,] <- c(1,1)*((L-1)/2)
i <- 0
plotf <- function(x, m, pot){
# create data frames
traj.df <- data.frame(x=x[,1],y=x[,2])
im <- m + pot
df <- expand.grid(x=15:35, y=15:35)
df$z <- as.vector(im[15:35,15:35])
# create plot
p1 <- ggplot(data=traj.df,aes(x=x,y=y)) +
geom_raster(data=df,aes(x, y, fill=z)) +
scale_fill_gradientn(colours=c("blue","red","orange","yellow")) +
geom_path(color="white") +
coord_fixed(ratio=1) + scale_x_continuous(limits=c(14.5,35.5)) +
scale_y_continuous(limits=c(14.5,35.5))
# print plot
pushViewport(viewport(layout=grid.layout(1,1)))
print(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))
}
# iteration loop
for ( j in 1:(trans+T) ){
if ( j==trans+1 ){
vi <- x[i+1,]
x <-  matrix(0, nrow=T+1, ncol=2)
x[1,] <- vi
i <- 0
}
debug_var <- m1[x[i+1,1],x[i+1,2]] #XXX delete
pot1 <- pot * a[j] #apply time-varying factor a=b to potential
i <- i+1
mx_temp <- m1[x[i,1],x[i,2]] #save value where no no relexation is applied
m1 <- gamma*m #relaxation
m1[x[i,1],x[i,2]] <- mx_temp + 1 #increase activation at h_ij
m2 <- m1 + pot1
ri <- sample(4)
idx <- matrix(x[i,],  nrow=4, ncol=2, byrow = TRUE)+ vec[ri,]
vi <- which(m2[idx] == min(m2[idx]))
next_x <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] ) #get next possible step
if(m1[next_x[1],next_x[2]] > thres[j]){ #check threshold nor next_x
#select and go to the global minimum
vi <- which(m2 == min(m2), arr.ind = TRUE) #returns vector with row & column indices of global minimum
x[i+1,] <-vi #save position
}
else
{
x[i+1,] <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] )
}
m <- m1
}
# jitter trajectory (for better visualization)
#x <- x + matrix(data=0.5*runif(2*length(x[,1])),ncol=2)
plotf(x, m, pot)
rm(list=ls(all=TRUE))
#setwd("~/Documents/papers/MathModBook/Exercises-Chap2/R/SAWmodel")
setwd("~/Google\ Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/")
rm(list=ls(all=TRUE))
library(ggplot2)
library(grid)
library (stats)
T = 10
L <- 51
trans <- 5000
gamma <- 0.999
slope <- 1.0*L
#time-dependent parameters
tau_p <- 150
tau_A <- 30
K <- 1
p_1 <- 0.0002
p_2 <- 0.02
beta <- 0.3
lambda0 <- 1 #steepness of potential, basemodel = 1
lambda1 <- 0.2
lambda2 <- 0.7
#time-varying functions and parameters
t <- seq(1, T + trans)
a <- lambda0/(1 + lambda1 * exp( - p_1 * (t - tau_p)^2)) # a=b
f <- 1/(1 + lambda1 * exp( - p_1 * (t - 2 * tau_p)^2))
D <- lambda2 * ( (p_2^K) / factorial(K) ) * (t - (tau_p + tau_A))^K * exp(- p_2 * (t - (tau_p + tau_A)))
a_A <- 1/(D + 1)
thres = 1/(1 + beta * ((1 - f) + (  1 - a_A)))
# prepare matrices
pot <- matrix(0, nrow=L, ncol=L)
c <- (L-1)/2
for (i in 1:L){
for (j in 1:L){
pot[i,j] = slope*( ((i-c)/c)^2 + ((j-c)/c)^2 ) #potential without time-varying factor
}
}
vec <- matrix( c(-1,0,1,0,0,-1,0,1), nrow=4, ncol=2, byrow = TRUE)
# prepare variables
m <- matrix(runif(L*L),L)
m1 <- m
x <-  matrix(0, nrow=trans+1, ncol=2)
x[1,] <- c(1,1)*((L-1)/2)
i <- 0
plotf <- function(x, m, pot){
# create data frames
traj.df <- data.frame(x=x[,1],y=x[,2])
im <- m + pot
df <- expand.grid(x=15:35, y=15:35)
df$z <- as.vector(im[15:35,15:35])
# create plot
p1 <- ggplot(data=traj.df,aes(x=x,y=y)) +
geom_raster(data=df,aes(x, y, fill=z)) +
scale_fill_gradientn(colours=c("blue","red","orange","yellow")) +
geom_path(color="white") +
coord_fixed(ratio=1) + scale_x_continuous(limits=c(14.5,35.5)) +
scale_y_continuous(limits=c(14.5,35.5))
# print plot
pushViewport(viewport(layout=grid.layout(1,1)))
print(p1,vp=viewport(layout.pos.row=1,layout.pos.col=1))
}
# iteration loop
for ( j in 1:(trans+T) ){
if ( j==trans+1 ){
vi <- x[i+1,]
x <-  matrix(0, nrow=T+1, ncol=2)
x[1,] <- vi
i <- 0
}
debug_var <- m1[x[i+1,1],x[i+1,2]] #XXX delete
pot1 <- pot * a[j] #apply time-varying factor a=b to potential
i <- i+1
mx_temp <- m1[x[i,1],x[i,2]] #save value where no no relexation is applied
m1 <- gamma*m #relaxation
m1[x[i,1],x[i,2]] <- mx_temp + 1 #increase activation at h_ij
m2 <- m1 + pot1
ri <- sample(4)
idx <- matrix(x[i,],  nrow=4, ncol=2, byrow = TRUE)+ vec[ri,]
vi <- which(m2[idx] == min(m2[idx]))
next_x <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] ) #get next possible step
if(m1[next_x[1],next_x[2]] > thres[j]){ #check threshold nor next_x
#select and go to the global minimum
vi <- which(m2 == min(m2), arr.ind = TRUE) #returns vector with row & column indices of global minimum
x[i+1,] <-vi #save position
}
else
{
x[i+1,] <-  c(x[i,1] + vec[ri[vi],1], x[i,2] + vec[ri[vi],2] )
}
m <- m1
}
# jitter trajectory (for better visualization)
#x <- x + matrix(data=0.5*runif(2*length(x[,1])),ncol=2)
plotf(x, m, pot)
thres
qplot(thres)
qplot(t, thres)
a
a(3000)
a[3000]
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
debugSource('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
j
debugSource('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
j
x
debugSource('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
x
m[24,30]
m1[24,30]
View(m1)
View(pot)
vi
min(m2)
which(m2 == min(m2))
which(m2 == min(m2), arr.ind == TRUE)
which(m2 == min(m2), arr.ind = TRUE)
which(m1 == min(m1), arr.ind = TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
warnings()
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
rm(list=ls(all=TRUE))
source('~/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/rproject.R', echo=TRUE)
load("/Users/adrian/Google Drive/Studium/Math_VO/Abschlussaufgabe/modelling_VO/workspace_figure3C1.RData")
sacRate(sac, -200, 600)
